#!/home/dvv/.nvm/v0.6.6/bin/node
//#!/usr/bin/env node

var assert = require('assert').ok
var Path = require('path')

var Fs = require('../')

// chroot to sandbox
var Daemon = require('daemon')
Daemon.chroot('../tmp')
// and drop provileges
process.setgid(500)
process.setuid(500)
process.chdir('/home')

//
// find all .js files with system `find` and `Fs.find`
//

function testFind(done) {

// prepare testing variables
var root = process.env.HOME
var cond = /\.js$/
var findcond = '\\*.js'
var root = '/'
var cond = /e/
var findcond = '\\*e\\*'

var jscount = 0, total = 0;
Fs.find(root, {
  //follow: true,
  //serial: true,
  match_fn: function (path, stat, depth, cb) {
    //console.log(path)
    total++
    if (path.match(cond)) {
      //console.log(path)
      jscount++
    }
    cb()
  }
}, function (err) {
  if (err) {
    console.log('ERR', err)
  }
  console.log('find(' + root + ', ' + cond  + ')', jscount, 'of', total)
  require('child_process').exec('find ' + root + ' | wc -l', function (err, findtotal) {
    findtotal = Number((findtotal || '0').trim())
    require('child_process').exec('find ' + root + ' -path ' + findcond + ' | wc -l', function (err, findjscount) {
      findjscount = Number((findjscount || '0').trim())
      console.log('find ' + root + ' -path ' + findcond  + ' | wc -l', findjscount, 'of', findtotal)
      assert(jscount === findjscount)
      assert(total === findtotal)
      done()
    })
  })
})

}

//
// mkdir_p ./HZ/foo./bar
//

function testMkdir(done) {

Fs.mkdir_p('HZ/foo./bar', '0771', function (err) {
  if (err) {
    console.log('mkdir_p ERROR', err)
  }
  assert(!err)
  assert(Path.existsSync('HZ'))
  done()
})

}

//
// rm_rf ./HZ/foo./bar
//

function testRm(done) {

Fs.rm_rf('HZ', function (err) {
  if (err) {
    console.log('rm_fr ERROR', err)
  }
  assert(!err)
  assert(!Path.existsSync('HZ/foo./bar'))
  assert(!Path.existsSync('HZ/foo.'))
  assert(!Path.existsSync('HZ'))
  done()
})

}

//
// ln_sf './ZH/foo./b ar'
//

function testLn(done) {

Fs.ln_sf('/etc/passwd', 'ZH/foo./b ar', function (err) {
  if (err) {
    console.log('ln_sf ERROR', err)
  }
  assert(!err)
  assert(Path.existsSync('ZH/foo.'))
  Fs.rm_rf('ZH', function (err) {
    if (err) {
      console.log('rm_fr ERROR', err)
    }
    assert(!err)
    assert(!Path.existsSync('HZ'))
    done()
  })
})

}

//
// run suite
//

testFind(
  testMkdir.bind(null,
  testRm.bind(null,
  testLn.bind(null,
  console.log.bind(console, 'DONE')))))
